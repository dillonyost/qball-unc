#! /usr/bin/perl -w

# converts a Qbox .xml pseudopotential into .fhi format for use with Abinit
#
# written by Erik Draeger, LLNL, 08/06/2007

use Math::Trig;
use XML::Parser::PerlSAX;
#use PseudoHandler;  # include package in script instead of in Perl include path

if ($#ARGV < 1) {
  print "syntax:  qbox_pseudo_to_fhi [lda|pbe] [.xml file(s)]\n";
  exit;
}

$xc = $ARGV[0];
if ($xc ne "lda" && $xc ne "LDA" && $xc ne "pbe" && $xc ne "PBE") {
  print "syntax:  qbox_pseudo_to_fhi [lda|pbe] [.xml file(s)]\n";
  exit;
}


$nlogpts = 1000;
foreach $xmlfile (@ARGV[1..$#ARGV]) {  


  $fhifile = join '',$xmlfile,".fhi";
  open FHI, ">$fhifile";

  print "Processing $xmlfile...\n";

  my $ps_handler = PseudoHandler->new();
  my $parser = XML::Parser::PerlSAX->new( Handler => $ps_handler );
  $parser->parse(Source => { SystemId => $xmlfile });

  my $symbol = $ps_handler->return_symbol();
  my $lmax = $ps_handler->return_lmax();
  my $llocal = $ps_handler->return_llocal();
  my $atomic_number = $ps_handler->return_atomic_number();
  my $mass = $ps_handler->return_mass();
  my $valence_charge = $ps_handler->return_valence_charge();
  my $mesh_spacing = $ps_handler->return_mesh_spacing();
  my @description = $ps_handler->return_description();

  print "lloc = $llocal, lmax = $lmax\n";

  print FHI "$xmlfile, converted from Qbox format to FHI format\n";
  $date = `date +%m%d%y`;  chomp $date;
  printf FHI " %0.3f  %0.3f    $date      zatom,zion,pspdat\n",$atomic_number,$valence_charge;
  $pspxc = 7;
  if ($xc eq "gga" || $xc eq "GGA") {
    $pspxc = 11;
  }
  print FHI "   6        $pspxc    $lmax   $llocal    $nlogpts     0       pspcod,pspxc,lmax,lloc,mmax,r2well\n";
  print FHI "  0.000  0.000  0.000                 rchrg, fchrg, qchrg\n";
  print FHI "5--- These two lines are available for giving more information, later\n";
  print FHI "6\n";
  print FHI "7-Here follows the cpi file from the fhi98pp code-\n";
  printf FHI "%0.6e   %u\n",$valence_charge,$lmax+1;
  print FHI " 0.0000    0.0000    0.0000   0.0000\n";
  print FHI "  0.0000    .00e+00   .00e+00\n";
  print FHI "  0.0000    .00e+00   .00e+00\n";
  print FHI "  0.0000    .00e+00   .00e+00\n";
  print FHI "  0.0000    .00e+00   .00e+00\n";
  print FHI "  0.0000    .00e+00   .00e+00\n";
  print FHI "  0.0000    .00e+00   .00e+00\n";
  print FHI "  0.0000    .00e+00   .00e+00\n";
  print FHI "  0.0000    .00e+00   .00e+00\n";
  print FHI "  0.0000    .00e+00   .00e+00\n";

# read radial potential and wavefunction from .xml file
  for ($l=0; $l<=$lmax; $l++) {
    @vofr = $ps_handler->return_potential($l);
    @phiofr = $ps_handler->return_wavefun($l);
    for ($i=0;$i<=$#vofr;$i++) { 
      $rlin[$i] = $i*$mesh_spacing;
    }

    ($amesh,@outputdata) = linear_to_log_spline(@rlin,@vofr);
    $npts = ($#outputdata+1)/2;

    #separate output into rlog and data
    my @rlog;
    my @vofrlog;
    for ($i=0; $i<$npts; $i++) {
      $rlog[$i] = $outputdata[$i];
    }
    for ($i=0; $i<$npts; $i++) {
      $vofrlog[$i] = $outputdata[$i+$npts];
    }                            

    ($amesh,@outputdata) = linear_to_log_spline(@rlin,@phiofr);
    $npts = ($#outputdata+1)/2;
    my @phiofrlog;
    for ($i=0; $i<$npts; $i++) {
      $phiofrlog[$i] = $outputdata[$i+$npts];
    }                            

    printf FHI "$nlogpts  %0.14e\n",$amesh;
    for ($i=0; $i<$npts; $i++) {
      printf FHI "%4u %0.14e %0.14e %0.14e\n",$i+1,$rlog[$i],$phiofrlog[$i]*$rlog[$i],$vofrlog[$i];
    }
  }
  close FHI;
}


sub linear_to_log_spline {

# spline boundary conditions
  #$bc1 = 0.0;     # flat boundary condition (y'=0)
  #$bc2 = 0.0;     # flat boundary condition (y'=0)
  $bc1 = 1.E31;  # Natural boundary condition (y"=0)
  $bc2 = 1.E31;  # Natural boundary condition (y"=0)

  $npoints = $nlogpts; # number of points in .fhi log grid
  $rmin = 1.E-6; # smallest value of r in log grid

  my (@inputdata) = @_;
  my @r;
  my @lindata;
  $rpts = ($#inputdata+1)/2;
  for ($i=0; $i<$rpts; $i++) {
    $r[$i] = $inputdata[$i];
  }
  for ($i=0; $i<$rpts; $i++) {
    $lindata[$i] = $inputdata[$i+$rpts];
  }                            
  my $n = $#r;

  # spline linear grid points
  if ($bc1 >= 1.E30) {
    $y2[0] = 0.0;
    $u[0] = 0.0;
  }
  else {
    $y2[0] = -0.5;
    $u[0] = ( 3.0 / ($r[1]-$r[0]) ) * ( ($lindata[1]-$lindata[0]) / ($r[1]-$r[0]) - $bc1 );
    if (($r[1]-$r[0]) < 0.0) {
      print "Error with grid:  r[0] = $r[0], r[1] = $r[1]\n";
      exit;
    }
  }

  for ( $i = 1; $i < $n-1; $i++ ) {
    if (($r[$i+1]-$r[$i]) < 0.0) {
      print "Error with grid:  r[0] = $r[0], r[1] = $r[1]\n";
      exit;
    }

    $sig = ( $r[$i] - $r[$i-1] ) / ( $r[$i+1] - $r[$i-1] );
    $p = $sig * $y2[$i-1] + 2.0;
    $y2[$i] = ( $sig - 1.0 ) / $p;
    $u[$i] = ( 6.0 * ( ( $lindata[$i+1] - $lindata[$i] ) / ( $r[$i+1] - $r[$i] ) -
                     ( $lindata[$i] - $lindata[$i-1] ) / ( $r[$i] - $r[$i-1] ) ) /
             ( $r[$i+1] - $r[$i-1] ) - $sig * $u[$i-1] ) / $p;
  }

  if ( $bc2 >= 1.e30 ) {
    $qn = 0.0;
    $un = 0.0;
  }
  else {
    $qn = 0.5;
    $un = ( 3.0 / ($r[$n-1]-$r[$n-2]) ) * 
         ( $bc2 - ($lindata[$n-1]-$lindata[$n-2]) / ($r[$n-1]-$r[$n-2]) );
  }

  $y2[$n-1] = ( $un - $qn * $u[$n-2] ) / ( $qn * $y2[$n-2] + 1.0 );

  for ( $k = $n-2; $k >= 0; $k-- ) {
    $y2[$k] = $y2[$k] * $y2[$k+1] + $u[$k];
  }



  # define log grid, calculate interpolated values on this grid
  $amesh = ($r[$#r]/$rmin)**(1./($npoints-1));

  print "amesh = $amesh, rmin = $rmin, rmax = $r[$n]\n";
  $rlog[$npoints-1] = $r[$n];
  for ($i = $npoints-2; $i >= 0; $i--) {
    $rlog[$i] = $rlog[$i+1]/$amesh;
  }

  my @logdata;
  for ($i = 0; $i < $npoints; $i++) {
    $klo = 0.;
    $khi = $n-1;

    while ( $khi - $klo > 1 ) {
      $k = ( $khi + $klo ) / 2;
      if ( $r[$k] > $rlog[$i] ) {
        $khi = $k;
      }
      else {
        $klo = $k;
      }
    }

    $h = $r[$khi] - $r[$klo];
    if ($h <= 0.0) { 
      print "Problem in spline:  h = $h, which is <= 0.0\n";
      exit;
    }

    $a = ( $r[$khi] - $rlog[$i] ) / $h;
    $b = ( $rlog[$i] - $r[$klo] ) / $h;

    $ylog = $a * $lindata[$klo] + $b * $lindata[$khi] + $h * $h * (1.0/6.0) *
       ( ($a**3-$a) * $y2[$klo] + ($b**3-$b) * $y2[$khi] );

    $logdata[$i] = $ylog;

  }


  return($amesh,@rlog,@logdata);

}

##########################################################################################
#  Pseudopotential XML handler
###########################################################################################

package PseudoHandler;

my $currelt = '';
my $currl = -1;
my $ndesc = -1;
my $symbol;
my $atomic_number;
my $mass;
my $lmax;
my $llocal;
my $valence_charge;
my $mesh_spacing;

sub new {
  my ($type) = @_;

  $currl = -1;
  $ndesc = -1;
  undef @desc;
  undef @wavefunction;
  undef @potential;

  return bless {}, $type;  
}

sub start_element {
  my ($self, $element) = @_;
  
#  print "Start element: $element->{Name}\n";

  $currelt = $element->{Name};

  if (defined $element->{'Attributes'}->{'l'}) { 
    my $l = $element->{'Attributes'}->{'l'};
    #print "attribute l = $l\n";
    $currl = $l;
    $npotpts[$currl] = -1;
    $nwfpts[$currl] = -1;
  }

#  %attr = $element->{Attributes};
#  foreach $key (keys %attr) { 
#    print "attribute $key = $attr{$key}\n";;
#  }

}

sub end_element {
  my ($self, $element) = @_;
#  print "End element: $element->{Name}\n";
}

sub characters {
  my ($self, $characters) = @_;

# PerlSAX handlers separate elements by newlines; each newline generates its own call to 
# the characters() function.  Additionally, for large data files, a characters() call may only 
# return a fraction of a string --> join everything between newlines into a single value

  if ($currelt eq 'radial_potential' && $currl >= 0) { 
    $data = $characters->{Data};
    $ch = chomp($data);
    if ($ch == 0) { 
      $currcnt = $npotpts[$currl];
      if (!defined($potential[$currcnt][$currl])) {
        $potential[$currcnt][$currl] = $data;
      }
      else {
        $potential[$currcnt][$currl] = join '',$potential[$currcnt][$currl],$data;
      }
    }
    elsif ($ch == 1) {
      $npotpts[$currl]++;
    }
    else {
      print "Unexpected return value from chomp\n";
      exit;
    }
  }
  if ($currelt eq 'radial_function' && $currl >= 0) { 
    $data = $characters->{Data};
    $ch = chomp($data);
    if ($ch == 0) { 
      $currcnt = $nwfpts[$currl];
      if (!defined($wavefun[$currcnt][$currl])) {
        $wavefun[$currcnt][$currl] = $data;
      }
      else {
        $wavefun[$currcnt][$currl] = join '',$wavefun[$currcnt][$currl],$data;
      }
    }
    elsif ($ch == 1) {
      $nwfpts[$currl]++;
    }
    else {
      print "Unexpected return value from chomp\n";
      exit;
    }
  }

  if ($currelt eq 'description') { 
    $data = $characters->{Data};
    $ch = chomp($data);
    if ($ch == 0) { 
      if (!defined($desc[$ndesc])) {
        $desc[$ndesc] = $data;
      }
      else {
        $desc[$ndesc] = join '',$desc[$ndesc],$data;
      }
    }
    elsif ($ch == 1) { 
      $ndesc++;
    }
  }
  if ($currelt eq 'symbol') { 
    $data = $characters->{Data};
    $ch = chomp($data);
    if ($data ne '') { $symbol = $data; }
  }
  if ($currelt eq 'lmax') { 
    $data = $characters->{Data};
    $ch = chomp($data);
    if ($data ne '') { $lmax = $data; }
  }
  if ($currelt eq 'atomic_number') { 
    $data = $characters->{Data};
    $ch = chomp($data);
    if ($data ne '') { $atomic_number = $data; }
  }
  if ($currelt eq 'mass') { 
    $data = $characters->{Data};
    $ch = chomp($data);
    if ($data ne '') { $mass = $data; }
  }
  if ($currelt eq 'llocal') { 
    $data = $characters->{Data};
    $ch = chomp($data);
    if ($data ne '') { $llocal = $data; }
  }
  if ($currelt eq 'valence_charge') { 
    $data = $characters->{Data};
    $ch = chomp($data);
    if ($data ne '') { $valence_charge = $data; }
  }
  if ($currelt eq 'mesh_spacing') { 
    $data = $characters->{Data};
    $ch = chomp($data);
    if ($data ne '') { $mesh_spacing = $data; }
  }


}

sub return_wavefun {
  my ($self,$lin) = @_;
  my @outwf;
  if (!defined($wavefun[0][$lin])) { 
    print "Error:  wavefun undefined at l=$lin\n";
    exit;
  }
  for ($j=0; $j<$nwfpts[$lin]; $j++) { 
    if (defined($wavefun[$j][$lin])) { 
      if ($wavefun[$j][$lin] ne '') { 
        $outwf[$j] = $wavefun[$j][$lin];
      }
    }
  }
  return @outwf;
}
sub return_potential {
  my ($self,$lin) = @_;
  my @outpot;
  if (!defined($potential[0][$lin])) { 
    print "Error:  potential undefined at l=$lin\n";
    exit;
  }
  for ($j=0; $j<$npotpts[$lin]; $j++) { 
    if (defined($potential[$j][$lin])) { 
      if ($potential[$j][$lin] ne '') { 
        $outpot[$j] = $potential[$j][$lin];
      }
    }
  }
  return @outpot;
}
sub return_description {
  return @desc;
}
sub return_symbol { 
  return $symbol;
}
sub return_atomic_number { 
  return $atomic_number;
}
sub return_mass { 
  return $mass;
}
sub return_lmax { 
  return $lmax;
}
sub return_llocal { 
  return $llocal;
}
sub return_valence_charge { 
  return $valence_charge;
}
sub return_mesh_spacing { 
  return $mesh_spacing;
}

1;
