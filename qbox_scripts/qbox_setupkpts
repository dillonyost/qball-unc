#! /usr/bin/perl -w

# qbox_setup reads in a Qbox coordinate (.sys) file, and calculates the symmetry operations
# from the cell vectors and atomic positions.  An irreducible Monkhorst-Pack k-point grid is
# then generated, with symmetry-equivalent k-points removed.
#
# written by Erik Draeger, 11/29/2006

$thresh = 1.E-7;  # threshold for atom positions being the same after sym op applied
$twopiinv = 1./(2.*3.14159265358979323846);

if ($#ARGV < 0) {
  print "syntax:  qbox_setup [.sys file(s)]\n";
  exit;
}

# 48 SYM OPS FOR CUBIC CELL, IN CARTESIAN COORDINATES

#  identity
$n=0;
$cubsym[0][0][$n] = 1; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 1; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 1;
#  180 deg rotation - cart. axis [0,0,1]
$n=1;
$cubsym[0][0][$n] = -1; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = -1; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 1;
#  180 deg rotation - cart. axis [0,1,0]
$n=2;
$cubsym[0][0][$n] = -1; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 1; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = -1;
#  180 deg rotation - cart. axis [1,0,0]
$n=3;
$cubsym[0][0][$n] = 1; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = -1; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = -1;
#  180 deg rotation - cart. axis [1,1,0]
$n=4;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 1; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 1; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = -1;
#  180 deg rotation - cart. axis [1,-1,0]
$n=5;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = -1; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = -1; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = -1;
#  90 deg rotation - cart. axis [0,0,-1]
$n=6;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = -1; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 1; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 1;
#  90 deg rotation - cart. axis [0,0,1]
$n=7;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 1; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = -1; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 1;
#  180 deg rotation - cart. axis [1,0,1]
$n=8;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 1;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = -1; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 1; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 0;
#  180 deg rotation - cart. axis [-1,0,1]
$n=9;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = -1;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = -1; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = -1; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 0;
#  90 deg rotation - cart. axis [0,1,0]
$n=10;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = -1;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 1; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 1; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 0;
#  90 deg rotation - cart. axis [0,-1,0]
$n=11;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 1;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 1; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = -1; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 0;
#  180 deg rotation - cart. axis [0,1,1]
$n=12;
$cubsym[0][0][$n] = -1; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 1;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 1; $cubsym[2][2][$n] = 0;
#  180 deg rotation - cart. axis [0,1,-1]
$n=13;
$cubsym[0][0][$n] = -1; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = -1;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = -1; $cubsym[2][2][$n] = 0;
#  90 deg rotation - cart. axis [-1,0,0]
$n=14;
$cubsym[0][0][$n] = 1; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = -1;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 1; $cubsym[2][2][$n] = 0;
#  90 deg rotation - cart. axis [1,0,0]
$n=15;
$cubsym[0][0][$n] = 1; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 1;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = -1; $cubsym[2][2][$n] = 0;
#  120 deg rotation - cart. axis [-1,-1,1]
$n=16;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 1;
$cubsym[1][0][$n] = 1; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 1; $cubsym[2][2][$n] = 0;
#  120 deg rotation - cart. axis [-1,1,1]
$n=17;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = -1;
$cubsym[1][0][$n] = -1; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 1; $cubsym[2][2][$n] = 0;
#  120 deg rotation - cart. axis [-1,-1,1]
$n=18;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = -1;
$cubsym[1][0][$n] = 1; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = -1; $cubsym[2][2][$n] = 0;
#  120 deg rotation - cart. axis [-1,1,-1]
$n=19;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 1;
$cubsym[1][0][$n] = -1; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = -1; $cubsym[2][2][$n] = 0;
#  120 deg rotation - cart. axis [1,1,1]
$n=20;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 1; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 1;
$cubsym[2][0][$n] = 1; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 0;
#  120 deg rotation - cart. axis [1,-1,1]
$n=21;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = -1; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = -1;
$cubsym[2][0][$n] = 1; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 0;
#  120 deg rotation - cart. axis [1,-1,-1]
$n=22;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = -1; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 1;
$cubsym[2][0][$n] = -1; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 0;
#  120 deg rotation - cart. axis [1,1,-1]
$n=23;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 1; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = -1;
$cubsym[2][0][$n] = -1; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 0;
#  inversion
$n=24;
$cubsym[0][0][$n] = -1; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = -1; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = -1;
#  inv. 180 deg rotation - cart. axis [0,0,1]
$n=25;
$cubsym[0][0][$n] = 1; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 1; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = -1;
#  inv. 180 deg rotation - cart. axis [0,1,0]
$n=26;
$cubsym[0][0][$n] = 1; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = -1; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 1;
#  inv. 180 deg rotation - cart. axis [1,0,0]
$n=27;
$cubsym[0][0][$n] = -1; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 1; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 1;
#  inv. 180 deg rotation - cart. axis [1,1,0]
$n=28;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = -1; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = -1; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 1;
#  inv. 180 deg rotation - cart. axis [1,-1,0]
$n=29;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 1; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 1; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 1;
#  inv. 90 deg rotation - cart. axis [0,0,-1]
$n=30;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 1; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = -1; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = -1;
#  inv. 90 deg rotation - cart. axis [0,0,1]
$n=31;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = -1; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 1; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = -1;
#  inv. 180 deg rotation - cart. axis [1,0,1]
$n=32;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = -1;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 1; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = -1; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 0;
#  inv. 180 deg rotation - cart. axis [-1,0,1]
$n=33;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 1;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 1; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 1; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 0;
#  inv. 90 deg rotation - cart. axis [0,1,0]
$n=34;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 1;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = -1; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = -1; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 0;
#  inv. 90 deg rotation - cart. axis [0,-1,0]
$n=35;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = -1;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = -1; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 1; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 0;
#  inv. 180 deg rotation - cart. axis [0,1,1]
$n=36;
$cubsym[0][0][$n] = 1; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = -1;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = -1; $cubsym[2][2][$n] = 0;
#  inv. 180 deg rotation - cart. axis [0,1,-1]
$n=37;
$cubsym[0][0][$n] = 1; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 1;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 1; $cubsym[2][2][$n] = 0;
#  inv. 90 deg rotation - cart. axis [-1,0,0]
$n=38;
$cubsym[0][0][$n] = -1; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 1;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = -1; $cubsym[2][2][$n] = 0;
#  inv. 90 deg rotation - cart. axis [1,0,0]
$n=39;
$cubsym[0][0][$n] = -1; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = -1;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 1; $cubsym[2][2][$n] = 0;
#  inv. 120 deg rotation - cart. axis [-1,-1,1]
$n=40;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = -1;
$cubsym[1][0][$n] = -1; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = -1; $cubsym[2][2][$n] = 0;
#  inv. 120 deg rotation - cart. axis [-1,1,1]
$n=41;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 1;
$cubsym[1][0][$n] = 1; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = -1; $cubsym[2][2][$n] = 0;
#  inv. 120 deg rotation - cart. axis [-1,-1,1]
$n=42;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = 1;
$cubsym[1][0][$n] = -1; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 1; $cubsym[2][2][$n] = 0;
#  inv. 120 deg rotation - cart. axis [-1,1,-1]
$n=43;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 0; $cubsym[0][2][$n] = -1;
$cubsym[1][0][$n] = 1; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 0;
$cubsym[2][0][$n] = 0; $cubsym[2][1][$n] = 1; $cubsym[2][2][$n] = 0;
#  inv. 120 deg rotation - cart. axis [1,1,1]
$n=44;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = -1; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = -1;
$cubsym[2][0][$n] = -1; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 0;
#  inv. 120 deg rotation - cart. axis [1,-1,1]
$n=45;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 1; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 1;
$cubsym[2][0][$n] = -1; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 0;
#  inv. 120 deg rotation - cart. axis [1,-1,-1]
$n=46;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = 1; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = -1;
$cubsym[2][0][$n] = 1; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 0;
#  inv. 120 deg rotation - cart. axis [1,1,-1]
$n=47;
$cubsym[0][0][$n] = 0; $cubsym[0][1][$n] = -1; $cubsym[0][2][$n] = 0;
$cubsym[1][0][$n] = 0; $cubsym[1][1][$n] = 0; $cubsym[1][2][$n] = 1;
$cubsym[2][0][$n] = 1; $cubsym[2][1][$n] = 0; $cubsym[2][2][$n] = 0;

$nsymtot = 48;

for ($i=0; $i<$nsymtot; $i++) {
  $symmap[$i] = -1;
}


SYSLOOP: foreach $sysfile (@ARGV[0..$#ARGV]) {  

  if (! -e $sysfile) { 
    print "File $sysfile not found!\n";
    next SYSLOOP;
  }
# open sym file for output
  @filesplit = split '\.sys',$sysfile;
  if ($#filesplit < 0) { $symfile = join '',$sysfile,'.kpt'; }
  else { $symfile = join '',$filesplit[0],'.kpt'; }
  open SYM,">$symfile";

# open kpt file for output
  @filesplit = split '\.sys',$sysfile;
  if ($#filesplit < 0) { $kptfile = join '',$sysfile,'.fullgrid'; }
  else { $kptfile = join '',$filesplit[0],'.fullgrid'; }
  open KPT,">$kptfile";

# open .sys file, read cell vectors and atom positions
  $nspecies = 0;
  open SYS, $sysfile;
  SYSLINE: while ($line=<SYS>) {
    @testchar = split("#",$line);   # ignore comment lines
    if ($#testchar>0) { next SYSLINE; }
    @data = split ' ',$line;
    if ($data[0] eq 'set' && $data[1] eq 'cell') { 
      if ($#data < 10) { 
        print "Error reading .sys file!\n";
        exit;
      }
      $a[0][0] = $data[2]; $a[1][0] = $data[3]; $a[2][0] = $data[4];
      $a[0][1] = $data[5]; $a[1][1] = $data[6]; $a[2][1] = $data[7];
      $a[0][2] = $data[8]; $a[1][2] = $data[9]; $a[2][2] = $data[10];

      # calculate volume:  a0 * ( a1 x a2 )
      $a12x = $a[1][1]*$a[2][2] - $a[1][2]*$a[2][1];  #a1y*a2z-a1z*a2y
      $a12y = $a[2][1]*$a[0][2] - $a[2][2]*$a[0][1];  #a1z*a2x-a1x*a2z
      $a12z = $a[0][1]*$a[1][2] - $a[0][2]*$a[1][1];  #a1x*a2y-a1y*a2x
      $volume = $a[0][0]*$a12x + $a[1][0]*$a12y + $a[2][0]*$a12z;
      print "volume = $volume\n";

      # calculate reciprocal lattice vectors:  b1 = 2*pi/vol (a2 x a3)
      $a01x = $a[1][0]*$a[2][1] - $a[2][0]*$a[1][1];
      $a01y = $a[2][0]*$a[0][1] - $a[0][0]*$a[2][1];
      $a01z = $a[0][0]*$a[1][1] - $a[1][0]*$a[0][1];
      $a20x = $a[1][2]*$a[2][0] - $a[1][0]*$a[2][2];
      $a20y = $a[2][2]*$a[0][0] - $a[2][0]*$a[0][2];
      $a20z = $a[0][2]*$a[1][0] - $a[0][0]*$a[1][2];
      $twopivol = 2.*3.14159265358979323846/$volume;
      $b[0][0] = $twopivol*$a12x;  $b[1][0] = $twopivol*$a12y;  $b[2][0] = $twopivol*$a12z;  
      $b[0][1] = $twopivol*$a20x;  $b[1][1] = $twopivol*$a20y;  $b[2][1] = $twopivol*$a20z;  
      $b[0][2] = $twopivol*$a01x;  $b[1][2] = $twopivol*$a01y;  $b[2][2] = $twopivol*$a01z;  

#DEBUG
#      print "recip lattice vectors:\n";
#      print "  b0 = $b[0][0]  $b[1][0]  $b[2][0]\n";
#      print "  b1 = $b[0][1]  $b[1][1]  $b[2][1]\n";
#      print "  b2 = $b[0][2]  $b[1][2]  $b[2][2]\n";

    }
    elsif ($data[0] eq 'atom') {
      #$name = $data[1];
      $species = $data[2];
      if (!defined($natoms{$species})) {
        $natoms{$species} = 1;
        $speciesname[$nspecies] = $species;
        $nspecies++;
      }
      else {
        $natoms{$species}++;
      }
      $n = $natoms{$species} - 1;
      #$rx{$species}[$n] = $data[3];
      #$ry{$species}[$n] = $data[4];
      #$rz{$species}[$n] = $data[5];
      $rxtalx{$species}[$n] = $twopiinv*($data[3]*$b[0][0] + $data[4]*$b[1][0] + $data[5]*$b[2][0]);
      $rxtaly{$species}[$n] = $twopiinv*($data[3]*$b[0][1] + $data[4]*$b[1][1] + $data[5]*$b[2][1]);
      $rxtalz{$species}[$n] = $twopiinv*($data[3]*$b[0][2] + $data[4]*$b[1][2] + $data[5]*$b[2][2]);
      while ($rxtalx{$species}[$n] <= -0.5) { $rxtalx{$species}[$n] += 1.0; }
      while ($rxtaly{$species}[$n] <= -0.5) { $rxtaly{$species}[$n] += 1.0; }
      while ($rxtalz{$species}[$n] <= -0.5) { $rxtalz{$species}[$n] += 1.0; }
      while ($rxtalx{$species}[$n] > 0.5) { $rxtalx{$species}[$n] -= 1.0; }
      while ($rxtaly{$species}[$n] > 0.5) { $rxtaly{$species}[$n] -= 1.0; }
      while ($rxtalz{$species}[$n] > 0.5) { $rxtalz{$species}[$n] -= 1.0; }

#ewd DEBUG
#      printf "atom position:  cart = %0.4f %0.4f %0.4f, xtal = %0.4f %0.4f %0.4f\n",$data[3],$data[4],$data[5],$rxtalx{$species}[$n],$rxtaly{$species}[$n],$rxtalz{$species}[$n];

    }
  }
  close SYS;

# for now, print a message indicating that we're starting from the 48 sym ops of a cubic cell
  print "Starting with 48 sym ops for cubic cell...\n";


# convert symmetry operations to crystal coordinates
#
#   sym_xtal^T = a^-1 sym a
#      where a is a 3x3 matrix of cell vectors

  $a11 = $a[0][0]; $a12 = $a[0][1]; $a13 = $a[0][2]; 
  $a21 = $a[1][0]; $a22 = $a[1][1]; $a23 = $a[1][2]; 
  $a31 = $a[2][0]; $a32 = $a[2][1]; $a33 = $a[2][2]; 

  $deta = $a11*$a22*$a33 + $a12*$a23*$a31 + $a13*$a21*$a32 - $a13*$a22*$a31 - $a12*$a21*$a33 - $a11*$a23*$a32;
  if ($deta == 0.0) {
    print "Determinant of lattice vector matrix is zero!\n";
    exit;
  }
  $invdeta = 1.0/$deta;
  $ainv[0][0] = $invdeta*($a22*$a33-$a23*$a32);
  $ainv[0][1] = $invdeta*($a13*$a32-$a12*$a33);
  $ainv[0][2] = $invdeta*($a12*$a23-$a13*$a22);
  $ainv[1][0] = $invdeta*($a23*$a31-$a21*$a33);
  $ainv[1][1] = $invdeta*($a11*$a33-$a13*$a31);
  $ainv[1][2] = $invdeta*($a13*$a21-$a11*$a23);
  $ainv[2][0] = $invdeta*($a21*$a32-$a31*$a22);
  $ainv[2][1] = $invdeta*($a12*$a31-$a11*$a32);
  $ainv[2][2] = $invdeta*($a11*$a22-$a12*$a21);

  for ($s=0; $s<$nsymtot; $s++) {

    for ($j=0; $j<3; $j++) {
      for ($k=0; $k<3; $k++) {
        $symmulta[$j][$k] = 0.0;
        for ($l=0; $l<3; $l++) {
          $symmulta[$j][$k] += $cubsym[$j][$l][$s]*$a[$l][$k];
        }
      }
    }
    for ($j=0; $j<3; $j++) {
      for ($k=0; $k<3; $k++) {
        #$symxtal[$j][$k][$s] = 0.0;
        $symxtal[$k][$j][$s] = 0.0;
        for ($l=0; $l<3; $l++) {
          # orig formula
          #$symxtal[$j][$k][$s] += $ainv[$j][$l]*$symmulta[$l][$k];
          # output transpose of orig. formula
          $symxtal[$k][$j][$s] += $ainv[$j][$l]*$symmulta[$l][$k];
        }
      }
    }

  }
  
# use atom positions to select allowed sym. ops

  $flag = 0;
  $nsym = 0;
  for ($s=0; $s<$nsymtot; $s++) {

    # apply sym op to each atom position and see if there is an atom of the same
    # species at that point -- if true for all atoms, keep that sym op

    $thissymok = 1;
    for ($i=0; $i<$nspecies; $i++) {
      $spec = $speciesname[$i];
      for ($j=0; $j<$natoms{$spec}; $j++) {
        $x = $rxtalx{$spec}[$j];
        $y = $rxtaly{$spec}[$j];
        $z = $rxtalz{$spec}[$j];

        $newx = $symxtal[0][0][$s]*$x + $symxtal[0][1][$s]*$y + $symxtal[0][2][$s]*$z;
        $newy = $symxtal[1][0][$s]*$x + $symxtal[1][1][$s]*$y + $symxtal[1][2][$s]*$z;
        $newz = $symxtal[2][0][$s]*$x + $symxtal[2][1][$s]*$y + $symxtal[2][2][$s]*$z;

        $foundit = 0;
        for ($k=0; $k<$natoms{$spec}; $k++) {
          $x2 = $rxtalx{$spec}[$k] - $newx;
          $y2 = $rxtaly{$spec}[$k] - $newy;
          $z2 = $rxtalz{$spec}[$k] - $newz;
          while ($x2 < -0.5) { $x2 += 1.0; }
          while ($y2 < -0.5) { $y2 += 1.0; }
          while ($z2 < -0.5) { $z2 += 1.0; }
          while ($x2 > 0.5) { $x2 -= 1.0; }
          while ($y2 > 0.5) { $y2 -= 1.0; }
          while ($z2 > 0.5) { $z2 -= 1.0; }
          
          if (abs($x2) < $thresh && abs($y2) < $thresh && abs($z2) < $thresh) { 
            $foundit = 1;
#DEBUG
#            printf "sym $s: atom $j at %0.4f %0.4f %0.4f matched atom $k at %0.4f %0.4f %0.4f\n",$x,$y,$z,$rxtalx{$spec}[$k],$rxtaly{$spec}[$k],$rxtalz{$spec}[$k];


          }
        }
        if ($foundit == 0) { 
          $thissymok = 0;
        }
      }
    }
    if ($thissymok == 1) { 

#DEBUG
#      print "sym $s:  MATCH  $symxtal[0][0][$s]  $symxtal[0][1][$s]  $symxtal[0][2][$s]  $symxtal[1][0][$s]  $symxtal[1][1][$s]  $symxtal[1][2][$s]  $symxtal[2][0][$s]  $symxtal[2][1][$s]  $symxtal[2][2][$s]\n";

      for ($i=0; $i<3; $i++) {
        for ($j=0; $j<3; $j++) {
          $sym[$i][$j][$nsym] = $symxtal[$i][$j][$s];
        }
        $ftrans[$i][$nsym] = 0.0;
      }
      $symmap[$s] = $nsym;
      $nsym++;
    }
  }
  print "  $nsym symmetry operations allowed by atom positions\n";

# look for additional symmetry operations allowed when fractional translations are included

# first, check if cell is actually a supercell (in which case disallow fractional translations):

  $supercell = 0;
  ILOOP1: for ($i=0; $i<$nspecies; $i++) {
    $spec = $speciesname[$i];
    JLOOP1: for ($j=0; $j<$natoms{$spec}; $j++) {
      KLOOP1: for ($k=0; $k<$natoms{$spec}; $k++) {
        if ($j != $k) { 
          $ftx = $rxtalx{$spec}[$j] - $rxtalx{$spec}[$k];
          $fty = $rxtaly{$spec}[$j] - $rxtaly{$spec}[$k];
          $ftz = $rxtalz{$spec}[$j] - $rxtalz{$spec}[$k];

          # go through all atoms and test this fractional translation
          $thisft = 1;
          for ($p=0; $p<$nspecies; $p++) {
            $sp = $speciesname[$p];
            for ($q=0; $q<$natoms{$sp}; $q++) {
              $ttx = $rxtalx{$spec}[$q] - $ftx;
              $tty = $rxtaly{$spec}[$q] - $fty;
              $ttz = $rxtalz{$spec}[$q] - $ftz;

              $foundit = 0;
              for ($r=0; $r<$natoms{$sp}; $r++) {
                $x2 = $rxtalx{$spec}[$r] - $ttx;
                $y2 = $rxtaly{$spec}[$r] - $tty;
                $z2 = $rxtalz{$spec}[$r] - $ttz;
                while ($x2 < -0.5) { $x2 += 1.0; }
                while ($y2 < -0.5) { $y2 += 1.0; }
                while ($z2 < -0.5) { $z2 += 1.0; }
                while ($x2 > 0.5) { $x2 -= 1.0; }
                while ($y2 > 0.5) { $y2 -= 1.0; }
                while ($z2 > 0.5) { $z2 -= 1.0; }

                if (abs($x2) < $thresh && abs($y2) < $thresh && abs($z2) < $thresh) { 
                  $foundit = 1;
                }
              }
              if ($foundit == 0) {
                $thisft = 0;
              }
            }
          }
          if ($thisft == 1) { 
            print "This system is a supercell -- disabling fractional translations.\n";
            $supercell = 1;
            last ILOOP1;
          }
        }
      }
    }
  }

  if ($supercell == 0) {
    $ftcnt = 0;
    for ($s=1; $s<$nsymtot; $s++) {
      if ($symmap[$s] >= 0) {  # this is an error, I think
        for ($i=0; $i<$nspecies; $i++) {
          $spec = $speciesname[$i];
          JLOOP2: for ($j=0; $j<$natoms{$spec}; $j++) {
            $x = $rxtalx{$spec}[$j];
            $y = $rxtaly{$spec}[$j];
            $z = $rxtalz{$spec}[$j];
            $newx = $symxtal[0][0][$s]*$x + $symxtal[0][1][$s]*$y + $symxtal[0][2][$s]*$z;
            $newy = $symxtal[1][0][$s]*$x + $symxtal[1][1][$s]*$y + $symxtal[1][2][$s]*$z;
            $newz = $symxtal[2][0][$s]*$x + $symxtal[2][1][$s]*$y + $symxtal[2][2][$s]*$z;
            KLOOP2: for ($k=0; $k<$natoms{$spec}; $k++) {
              $ftx = $newx - $rxtalx{$spec}[$k];  # candidate translation for this operation
              $fty = $newy - $rxtaly{$spec}[$k];
              $ftz = $newz - $rxtalz{$spec}[$k];
              while ($ftx <= -1) { $ftx += 1.0; }
              while ($fty <= -1) { $fty += 1.0; }
              while ($ftz <= -1) { $ftz += 1.0; }
              while ($ftx >= 1) { $ftx -= 1.0; }
              while ($fty >= 1) { $fty -= 1.0; }
              while ($ftz >= 1) { $ftz -= 1.0; }
              if (abs($ftx) < $thresh) { $ftx = 0.0; }
              if (abs($fty) < $thresh) { $fty = 0.0; }
              if (abs($ftz) < $thresh) { $ftz = 0.0; }
              if (abs($ftx) < $thresh && abs($fty) < $thresh && abs($ftz) < $thresh) { next KLOOP2; }
              # go through all atoms and test this fractional translation w. sym op $s
              $thisft = 1;
              for ($p=0; $p<$nspecies; $p++) {
                $sp = $speciesname[$p];
                for ($q=0; $q<$natoms{$sp}; $q++) {
                  $qx = $rxtalx{$spec}[$q];
                  $qy = $rxtaly{$spec}[$q];
                  $qz = $rxtalz{$spec}[$q];
                  $newqx = $symxtal[0][0][$s]*$qx + $symxtal[0][1][$s]*$qy + $symxtal[0][2][$s]*$qz;
                  $newqy = $symxtal[1][0][$s]*$qx + $symxtal[1][1][$s]*$qy + $symxtal[1][2][$s]*$qz;
                  $newqz = $symxtal[2][0][$s]*$qx + $symxtal[2][1][$s]*$qy + $symxtal[2][2][$s]*$qz;
                  $ttx = $newqx - $ftx;  # shifted atom position
                  $tty = $newqy - $fty;
                  $ttz = $newqz - $ftz;
                  
                  $foundit = 0;
                  
                  # is there an atom at this position?
                  for ($r=0; $r<$natoms{$sp}; $r++) {
                    $x2 = $rxtalx{$spec}[$r] - $ttx;
                    $y2 = $rxtaly{$spec}[$r] - $tty;
                    $z2 = $rxtalz{$spec}[$r] - $ttz;
                    while ($x2 < -0.5) { $x2 += 1.0; }
                    while ($y2 < -0.5) { $y2 += 1.0; }
                    while ($z2 < -0.5) { $z2 += 1.0; }
                    while ($x2 > 0.5) { $x2 -= 1.0; }
                    while ($y2 > 0.5) { $y2 -= 1.0; }
                    while ($z2 > 0.5) { $z2 -= 1.0; }

                    if (abs($x2) < $thresh && abs($y2) < $thresh && abs($z2) < $thresh) { 
                      $foundit = 1;
                    }
                  }
                  if ($foundit == 0) {
                    $thisft = 0;
                  }
                }
              }
              if ($thisft == 1) { 
                for ($i=0; $i<3; $i++) {
                  for ($j=0; $j<3; $j++) {
                    $sym[$i][$j][$nsym] = $symxtal[$i][$j][$s];
                  }
                }
                while ($ftx <= -1) { $ftx += 1.0; }
                while ($fty <= -1) { $fty += 1.0; }
                while ($ftz <= -1) { $ftz += 1.0; }
                while ($ftx >= 1) { $ftx -= 1.0; }
                while ($fty >= 1) { $fty -= 1.0; }
                while ($ftz >= 1) { $ftz -= 1.0; }
                if (abs($ftx) < $thresh) { $ftx = 0.0; }
                if (abs($fty) < $thresh) { $fty = 0.0; }
                if (abs($ftz) < $thresh) { $ftz = 0.0; }
                $ftrans[0][$nsym] = $ftx;
                $ftrans[1][$nsym] = $fty;
                $ftrans[2][$nsym] = $ftz;
                $nsym++;
                $ftcnt++;
              }
            }
          }
        }
      }
    }
    print "  $ftcnt additional operations found w. fractional translations\n";
  }


# print out symmetry ops to file
  print "  $nsym total operations found\n\n";
  for ($s=0; $s<$nsym; $s++) {
    if ($ftrans[0][$s] != 0 || $ftrans[1][$s] != 0 || $ftrans[2][$s] != 0) {
      print SYM "symmetry  $sym[0][0][$s]  $sym[0][1][$s]  $sym[0][2][$s]  $sym[1][0][$s]  $sym[1][1][$s]  $sym[1][2][$s]  $sym[2][0][$s]  $sym[2][1][$s]  $sym[2][2][$s]  $ftrans[0][$s]  $ftrans[1][$s]  $ftrans[2][$s]\n";
    }
    else {
      print SYM "symmetry  $sym[0][0][$s]  $sym[0][1][$s]  $sym[0][2][$s]  $sym[1][0][$s]  $sym[1][1][$s]  $sym[1][2][$s]  $sym[2][0][$s]  $sym[2][1][$s]  $sym[2][2][$s]\n";
    }
  }



# generate Monkhorst-Pack grid of k-points
  $inflag = 0;
  while ($inflag == 0) {
    print "Enter order of Monkhorst-Pack grid (nx ny nz): ";
    $gridinp = <STDIN>;  chomp $gridinp;
    @ngrid = split ' ',$gridinp;
    if ($#ngrid != 2) { print "Input error, try again.\n"; }
    else { 
      $inflag = 1; 
      $nkx = $ngrid[0];
      $nky = $ngrid[1];
      $nkz = $ngrid[2];
    }
  }


  $nfull = $nkx*$nky*$nkz;
  print KPT "set nkpoints $nfull\n";
  print KPT "set nparallelkpts 1\n";
  $nkpts = 0;
  for ($kz=1; $kz<=$nkz; $kz++) {
    for ($ky=1; $ky<=$nky; $ky++) {
      for ($kx=1; $kx<=$nkx; $kx++) {
        $kpt[0][$nkpts] = (2*$kx-$nkx-1)/(2*$nkx);
        $kpt[1][$nkpts] = (2*$ky-$nky-1)/(2*$nky);
        $kpt[2][$nkpts] = (2*$kz-$nkz-1)/(2*$nkz);
        printf KPT "kpoint  %12.9f  %12.9f  %12.9f  1.0  crystal\n",$kpt[0][$nkpts],$kpt[1][$nkpts],$kpt[2][$nkpts];
        $nkpts++;
      }
    }
  }
  close KPT;

  # reduce full grid to irreducible set
  $kptsym[0][0] = $kpt[0][0];
  $kptsym[1][0] = $kpt[1][0];
  $kptsym[2][0] = $kpt[2][0];
  $wt[0] = 1.0;
  $nsymkpt = 1;
  for ($n=1; $n<$nkpts; $n++) {

    $flag = 0;
    SYMLOOP2: for ($s=0; $s<$nsym; $s++) {
      for ($i=0; $i<3; $i++) {
        $newk[$i] = 0.0;
        for ($l=0; $l<3; $l++) {
          $newk[$i] += $sym[$i][$l][$s]*$kpt[$l][$n];
        }
        while ($newk[$i] > 0.5) { $newk[$i] -= 1.0; }
        while ($newk[$i] < -0.5) { $newk[$i] += 1.0; }
      }

      for ($j=0; $j<$nsymkpt; $j++) {
        $kx = $kptsym[0][$j];  $ky = $kptsym[1][$j];  $kz = $kptsym[2][$j];
        if (abs($newk[0]-$kx) < $thresh && abs($newk[1]-$ky) < $thresh  && abs($newk[2]-$kz) < $thresh ) {

#DEBUG
#          printf "kpt  %0.4f  %0.4f  %0.4f is symmetry-equiv to %0.4f  %0.4f  %0.4f\n",$kpt[0][$n],$kpt[1][$n],$kpt[2][$n],$kx,$ky,$kz;

          $flag = 1;
          $wt[$j]++;
          last SYMLOOP2;
        }
      }
    }
    if ($flag == 0) { 
      $kptsym[0][$nsymkpt] = $kpt[0][$n];
      $kptsym[1][$nsymkpt] = $kpt[1][$n];
      $kptsym[2][$nsymkpt] = $kpt[2][$n];
      $wt[$nsymkpt] = 1.0;
      $nsymkpt++;
    }
  }
  print SYM "\n";
  print SYM "set nkpoints $nsymkpt\n";
  print SYM "set nparallelkpts 1\n";
  print SYM "\n";
  for ($k=0; $k<$nsymkpt; $k++) {
    printf SYM "kpoint  %12.9f  %12.9f  %12.9f  %12.9f  crystal\n",$kptsym[0][$k],$kptsym[1][$k],$kptsym[2][$k],$wt[$k];
  }
  close SYM;

  print "  $nsymkpt unique k-points found\n";

### TEST SYMMETRY AGAINST FFT GRID ###


 for ($s=0; $s<$nsym; $s++) {
   $symok[$s] = 1;
 }

  print "To test that symmetry operations match FFT grid, enter energy cutoff (Ry): \n";
  print "(This step is optional, hit ctrl-C to exit.)\n";
  $ecut = <STDIN>;  chomp $ecut;
  $ecut *= 0.5;

# calculate FFT grid from ecut
  $fac = sqrt(2.*$ecut)*$twopiinv;
  $htmp = ($fac * (abs($a[0][0])+abs($a[1][0])+abs($a[2][0])));
  $ktmp = ($fac * (abs($a[0][1])+abs($a[1][1])+abs($a[2][1])));
  $ltmp = ($fac * (abs($a[0][2])+abs($a[1][2])+abs($a[2][2])));
  $hmax = int $htmp;  $kmax = int $ktmp;  $lmax = int $ltmp;

  #print "h,k,lmax = $hmax, $kmax, $lmax\n";

  $hmax_used = -$hmax;  $hmin_used = $hmax;
  $kmax_used = -$kmax;  $kmin_used = $kmax;
  $lmax_used = -$lmax;  $lmin_used = $lmax;

  for ($kp=0; $kp<$nsymkpt; $kp++) {
    $kx = $kptsym[0][$kp];
    $ky = $kptsym[1][$kp];
    $kz = $kptsym[2][$kp];

    for ($h=-$hmax; $h<=$hmax; $h++) {
      for ($k=-$kmax; $k<=$kmax; $k++) {
        $l1 = $lmax; $l2 = -$lmax;
        $found = 0;
        for ($l=-$lmax; $l<=$lmax; $l++) {
          $twoe = (($h+$kx)*$b[0][0]+($k+$ky)*$b[0][1]+($l+$kz)*$b[0][2])**2 + (($h+$kx)*$b[1][0]+($k+$ky)*$b[1][1]+($l+$kz)*$b[1][2])**2 + (($h+$kx)*$b[2][0]+($k+$ky)*$b[2][1]+($l+$kz)*$b[2][2])**2;

          if ($twoe < 2*$ecut) {
            $l1 = min($l,$l1);
            $l2 = max($l,$l2);
            $found = 1;
          }
        }
        if ($found == 1) { 
          $hmax_used = max($h,$hmax_used);
          $kmax_used = max($k,$kmax_used);
          $lmax_used = max($l2,$lmax_used);
          $hmin_used = min($h,$hmin_used);
          $kmin_used = min($k,$kmin_used);
          $lmin_used = min($l1,$lmin_used);
        }
      }
    }
    #print "hklminused = $hmin_used  $kmin_used  $lmin_used\n";
    #print "hklmaxused = $hmax_used  $kmax_used  $lmax_used\n";


    $gridx = 2*max(abs($hmax_used),abs($hmin_used)) + 2;
    $gridy = 2*max(abs($kmax_used),abs($kmin_used)) + 2;
    $gridz = 2*max(abs($lmax_used),abs($lmin_used)) + 2;
    while ( factorizable($gridx) == 0 ) { $gridx += 2; }
    while ( factorizable($gridy) == 0 ) { $gridy += 2; }
    while ( factorizable($gridz) == 0 ) { $gridz += 2; }
    print "kpoint $kp:  for ecut = $ecut Ha, grid = $gridx  $gridy  $gridz\n";

    for ($s=0; $s<$nsym; $s++) {
      
      if ($sym[0][1][$s]*$gridy%$gridx != 0) { $symok[$s] = 0; }
      if ($sym[0][2][$s]*$gridz%$gridx != 0) { $symok[$s] = 0; }
      if ($sym[1][0][$s]*$gridx%$gridy != 0) { $symok[$s] = 0; }
      if ($sym[1][2][$s]*$gridz%$gridy != 0) { $symok[$s] = 0; }
      if ($sym[2][0][$s]*$gridx%$gridz != 0) { $symok[$s] = 0; }
      if ($sym[2][1][$s]*$gridy%$gridz != 0) { $symok[$s] = 0; }

      $ftx = $ftrans[0][$s]*$gridx;  $intx = int($ftx);
      $fty = $ftrans[1][$s]*$gridy;  $inty = int($fty);
      $ftz = $ftrans[2][$s]*$gridz;  $intz = int($ftz);
      $dx = abs($ftx-$intx);
      $dy = abs($fty-$inty);
      $dz = abs($ftz-$intz);

      if ($dx > $thresh || $dy > $thresh || $dz > $thresh) { $symok[$s] = 0; }

      #if ($symok[$s] == 0) { 
      #   print "symmetry not ok:   $sym[0][0][$s]  $sym[0][1][$s]  $sym[0][2][$s]  $sym[1][0][$s]  $sym[1][1][$s]  $sym[1][2][$s]  $sym[2][0][$s]  $sym[2][1][$s]  $sym[2][2][$s]  $ftrans[0][$s]  $ftrans[1][$s]  $ftrans[2][$s]\n";
      #}
    }
  }

  $nsym2 = 0;
  for ($s=0; $s<$nsym; $s++) {
    if ($symok[$s] == 1) { 
      for ($i=0; $i<3; $i++) {
        for ($j=0; $j<3; $j++) {
          $sym2[$i][$j][$nsym2] = $sym[$i][$j][$s];
        }
        $ftrans2[$i][$nsym2] = $ftrans[$i][$s];
      }
      $nsym2++;
    }
  }
  # if nsym != nsym2, reduce full grid to irreducible set again
  if ($nsym2 < $nsym) { 
    print "$nsym2 symmetry ops match grid, recalculating k-point set...\n";

    open SYM,">$symfile";
    for ($s=0; $s<$nsym2; $s++) {
      if ($ftrans2[0][$s] != 0 || $ftrans2[1][$s] != 0 || $ftrans2[2][$s] != 0) {
        print SYM "symmetry  $sym2[0][0][$s]  $sym2[0][1][$s]  $sym2[0][2][$s]  $sym2[1][0][$s]  $sym2[1][1][$s]  $sym2[1][2][$s]  $sym2[2][0][$s]  $sym2[2][1][$s]  $sym2[2][2][$s]  $ftrans2[0][$s]  $ftrans2[1][$s]  $ftrans2[2][$s]\n";
      }
      else {
        print SYM "symmetry  $sym2[0][0][$s]  $sym2[0][1][$s]  $sym2[0][2][$s]  $sym2[1][0][$s]  $sym2[1][1][$s]  $sym2[1][2][$s]  $sym2[2][0][$s]  $sym2[2][1][$s]  $sym2[2][2][$s]\n";
      }
    }

    $kptsym[0][0] = $kpt[0][0];
    $kptsym[1][0] = $kpt[1][0];
    $kptsym[2][0] = $kpt[2][0];
    $wt[0] = 1.0;
    $nsymkpt = 1;
    for ($n=1; $n<$nkpts; $n++) {

      $flag = 0;
      SYMLOOP3: for ($s=0; $s<$nsym2; $s++) {
        for ($i=0; $i<3; $i++) {
          $newk[$i] = 0.0;
          for ($l=0; $l<3; $l++) {
            $newk[$i] += $sym2[$i][$l][$s]*$kpt[$l][$n];
          }
          if ($newk[$i] > 0.5) { $newk[$i] -= 1.0; }
          if ($newk[$i] < -0.5) { $newk[$i] += 1.0; }
        }
        for ($j=0; $j<$nsymkpt; $j++) {
          $kx = $kptsym[0][$j];  $ky = $kptsym[1][$j];  $kz = $kptsym[2][$j];
          if (abs($newk[0]-$kx) < $thresh && abs($newk[1]-$ky) < $thresh  && abs($newk[2]-$kz) < $thresh ) {
            
#DEBUG
          #printf "kpt  %0.4f  %0.4f  %0.4f is symmetry-equiv to %0.4f  %0.4f  %0.4f\n",$kpt[0][$n],$kpt[1][$n],$kpt[2][$n],$kx,$ky,$kz;


            $flag = 1;
            $wt[$j]++;
            last SYMLOOP3;
          }
        }
      }
      if ($flag == 0) { 
        $kptsym[0][$nsymkpt] = $kpt[0][$n];
        $kptsym[1][$nsymkpt] = $kpt[1][$n];
        $kptsym[2][$nsymkpt] = $kpt[2][$n];
        $wt[$nsymkpt] = 1.0;
        $nsymkpt++;
      }
    }
    print SYM "\n";
    print SYM "set nkpoints $nsymkpt\n";
    print SYM "set nparallelkpts 1\n";
    print SYM "\n";
    for ($k=0; $k<$nsymkpt; $k++) {
      printf SYM "kpoint  %12.9f  %12.9f  %12.9f  %12.9f  crystal\n",$kptsym[0][$k],$kptsym[1][$k],$kptsym[2][$k],$wt[$k];
    }
    close SYM;
    
    print "  $nsymkpt unique k-points found\n";
  }
  else {
    print "All symmetry ops match the grid, exiting.\n";
  }
}

######################
sub min {
  my ($x,$y) = @_;
  if ($x < $y) { return $x; }
  else { return $y;}
}
sub max {
  my ($x,$y) = @_;
  if ($x < $y) { return $y; }
  else { return $x;}
}

#######################
sub factorizable {

  my ($in) = @_;

  if ( $in % 11 == 0 ) { $in /= 11; }
  if ( $in % 7 == 0 ) { $in /= 7; }
  if ( $in % 5 == 0 ) { $in /= 5; }
  if ( $in % 3 == 0 ) { $in /= 3; }
  if ( $in % 3 == 0 ) { $in /= 3; }
  while ( $in % 2 == 0 ) { $in /= 2; }

  if ($in == 1) { $outfact = 1; }
  else { $outfact = 0; }
  return $outfact;
}
